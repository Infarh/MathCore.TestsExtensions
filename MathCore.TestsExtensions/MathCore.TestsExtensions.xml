<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MathCore.TestsExtensions</name>
    </assembly>
    <members>
        <member name="T:MathCore.Tests.Annotations.CanBeNullAttribute">
            <summary>
            Indicates that the value of the marked element could be <c>null</c> sometimes,
            so the check for <c>null</c> is necessary before its usage
            </summary>
            <example><code>
            [CanBeNull] public object Test() { return null; }
            public void UseTest() {
              var p = Test();
              var s = p.ToString(); // Warning: Possible 'System.NullReferenceException'
            }
            </code></example>
        </member>
        <member name="T:MathCore.Tests.Annotations.NotNullAttribute">
            <summary>
            Indicates that the value of the marked element could never be <c>null</c>
            </summary>
            <example><code>
            [NotNull] public object Foo() {
              return null; // Warning: Possible 'null' assignment
            }
            </code></example>
        </member>
        <member name="T:MathCore.Tests.Annotations.ItemNotNullAttribute">
            <summary>
            Can be applied to symbols of types derived from IEnumerable as well as to symbols of Task
            and Lazy classes to indicate that the value of a collection item, of the Task.Result property
            or of the Lazy.Value property can never be null.
            </summary>
            <example><code>
            public void Foo([ItemNotNull]List&lt;string&gt; books)
            {
              foreach (var book in books) {
                if (book != null) // Warning: Expression is always true
                 Console.WriteLine(book.ToUpper());
              }
            }
            </code></example>
        </member>
        <member name="T:MathCore.Tests.Annotations.ItemCanBeNullAttribute">
            <summary>
            Can be applied to symbols of types derived from IEnumerable as well as to symbols of Task
            and Lazy classes to indicate that the value of a collection item, of the Task.Result property
            or of the Lazy.Value property can be null.
            </summary>
            <example><code>
            public void Foo([ItemCanBeNull]List&lt;string&gt; books)
            {
              foreach (var book in books)
              {
                // Warning: Possible 'System.NullReferenceException'
                Console.WriteLine(book.ToUpper());
              }
            }
            </code></example>
        </member>
        <member name="T:MathCore.Tests.Annotations.StringFormatMethodAttribute">
            <summary>
            Indicates that the marked method builds string by format pattern and (optional) arguments.
            Parameter, which contains format string, should be given in constructor. The format string
            should be in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/>-like form
            </summary>
            <example><code>
            [StringFormatMethod("message")]
            public void ShowError(string message, params object[] args) { /* do something */ }
            public void Foo() {
              ShowError("Failed: {0}"); // Warning: Non-existing argument in format string
            }
            </code></example>
        </member>
        <member name="M:MathCore.Tests.Annotations.StringFormatMethodAttribute.#ctor(System.String)">
            <param name="formatParameterName">
            Specifies which parameter of an annotated method should be treated as format-string
            </param>
        </member>
        <member name="T:MathCore.Tests.Annotations.InvokerParameterNameAttribute">
            <summary>
            Indicates that the function argument should be string literal and match one
            of the parameters of the caller function. For example, ReSharper annotates
            the parameter of <see cref="T:System.ArgumentNullException"/>
            </summary>
            <example><code>
            public void Foo(string param) {
              if (param == null)
                throw new ArgumentNullException("par"); // Warning: Cannot resolve symbol
            }
            </code></example>
        </member>
        <member name="T:MathCore.Tests.Annotations.NotifyPropertyChangedInvocatorAttribute">
             <summary>
             Indicates that the method is contained in a type that implements
             <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> interface
             and this method is used to notify that some property value changed
             </summary>
             <remarks>
             The method should be non-static and conform to one of the supported signatures:
             <list>
             <item><c>NotifyChanged(string)</c></item>
             <item><c>NotifyChanged(params string[])</c></item>
             <item><c>NotifyChanged{T}(Expression{Func{T}})</c></item>
             <item><c>NotifyChanged{T,U}(Expression{Func{T,U}})</c></item>
             <item><c>SetProperty{T}(ref T, T, string)</c></item>
             </list>
             </remarks>
             <example><code>
             public class Foo : INotifyPropertyChanged {
               public event PropertyChangedEventHandler PropertyChanged;
               [NotifyPropertyChangedInvocator]
               protected virtual void NotifyChanged(string propertyName) { ... }
            
               private string _name;
               public string Name {
                 get { return _name; }
                 set { _name = value; NotifyChanged("LastName"); /* Warning */ }
               }
             }
             </code>
             Examples of generated notifications:
             <list>
             <item><c>NotifyChanged("Property")</c></item>
             <item><c>NotifyChanged(() =&gt; Property)</c></item>
             <item><c>NotifyChanged((VM x) =&gt; x.Property)</c></item>
             <item><c>SetProperty(ref myField, value, "Property")</c></item>
             </list>
             </example>
        </member>
        <member name="T:MathCore.Tests.Annotations.ContractAnnotationAttribute">
            <summary>
            Describes dependency between method input and output
            </summary>
            <syntax>
            <p>Function Definition Table syntax:</p>
            <list>
            <item>FDT      ::= FDTRow [;FDTRow]*</item>
            <item>FDTRow   ::= Input =&gt; Output | Output &lt;= Input</item>
            <item>Input    ::= ParameterName: Value [, Input]*</item>
            <item>Output   ::= [ParameterName: Value]* {halt|stop|void|nothing|Value}</item>
            <item>Value    ::= true | false | null | notnull | canbenull</item>
            </list>
            If method has single input parameter, it's name could be omitted.<br/>
            Using <c>halt</c> (or <c>void</c>/<c>nothing</c>, which is the same)
            for method output means that the methos doesn't return normally.<br/>
            <c>canbenull</c> annotation is only applicable for output parameters.<br/>
            You can use multiple <c>[ContractAnnotation]</c> for each FDT row,
            or use single attribute with rows separated by semicolon.<br/>
            </syntax>
            <examples><list>
            <item><code>
            [ContractAnnotation("=> halt")]
            public void TerminationMethod()
            </code></item>
            <item><code>
            [ContractAnnotation("halt &lt;= condition: false")]
            public void Assert(bool condition, string text) // regular assertion method
            </code></item>
            <item><code>
            [ContractAnnotation("s:null => true")]
            public bool IsNullOrEmpty(string s) // string.IsNullOrEmpty()
            </code></item>
            <item><code>
            // A method that returns null if the parameter is null, and not null if the parameter is not null
            [ContractAnnotation("null => null; notnull => notnull")]
            public object Transform(object data) 
            </code></item>
            <item><code>
            [ContractAnnotation("s:null=>false; =>true,result:notnull; =>false, result:null")]
            public bool TryParse(string s, out Person result)
            </code></item>
            </list></examples>
        </member>
        <member name="T:MathCore.Tests.Annotations.LocalizationRequiredAttribute">
            <summary>
            Indicates that marked element should be localized or not
            </summary>
            <example><code>
            [LocalizationRequiredAttribute(true)]
            public class Foo {
              private string str = "my string"; // Warning: Localizable string
            }
            </code></example>
        </member>
        <member name="T:MathCore.Tests.Annotations.CannotApplyEqualityOperatorAttribute">
            <summary>
            Indicates that the value of the marked type (or its derivatives)
            cannot be compared using '==' or '!=' operators and <c>Equals()</c>
            should be used instead. However, using '==' or '!=' for comparison
            with <c>null</c> is always permitted.
            </summary>
            <example><code>
            [CannotApplyEqualityOperator]
            class NoEquality { }
            class UsesNoEquality {
              public void Test() {
                var ca1 = new NoEquality();
                var ca2 = new NoEquality();
                if (ca1 != null) { // OK
                  bool condition = ca1 == ca2; // Warning
                }
              }
            }
            </code></example>
        </member>
        <member name="T:MathCore.Tests.Annotations.BaseTypeRequiredAttribute">
            <summary>
            When applied to a target attribute, specifies a requirement for any type marked
            with the target attribute to implement or inherit specific type or types.
            </summary>
            <example><code>
            [BaseTypeRequired(typeof(IComponent)] // Specify requirement
            public class ComponentAttribute : Attribute { }
            [Component] // ComponentAttribute requires implementing IComponent interface
            public class MyComponent : IComponent { }
            </code></example>
        </member>
        <member name="T:MathCore.Tests.Annotations.UsedImplicitlyAttribute">
            <summary>
            Indicates that the marked symbol is used implicitly
            (e.g. via reflection, in external library), so this symbol
            will not be marked as unused (as well as by other usage inspections)
            </summary>
        </member>
        <member name="T:MathCore.Tests.Annotations.MeansImplicitUseAttribute">
            <summary>
            Should be used on attributes and causes ReSharper
            to not mark symbols marked with such attributes as unused
            (as well as by other usage inspections)
            </summary>
        </member>
        <member name="F:MathCore.Tests.Annotations.ImplicitUseKindFlags.Access">
            <summary>Only entity marked with attribute considered used</summary>
        </member>
        <member name="F:MathCore.Tests.Annotations.ImplicitUseKindFlags.Assign">
            <summary>Indicates implicit assignment to a member</summary>
        </member>
        <member name="F:MathCore.Tests.Annotations.ImplicitUseKindFlags.InstantiatedWithFixedConstructorSignature">
            <summary>
            Indicates implicit instantiation of a type with fixed constructor signature.
            That means any unused constructor parameters won't be reported as such.
            </summary>
        </member>
        <member name="F:MathCore.Tests.Annotations.ImplicitUseKindFlags.InstantiatedNoFixedConstructorSignature">
            <summary>Indicates implicit instantiation of a type</summary>
        </member>
        <member name="T:MathCore.Tests.Annotations.ImplicitUseTargetFlags">
            <summary>
            Specify what is considered used implicitly
            when marked with <see cref="T:MathCore.Tests.Annotations.MeansImplicitUseAttribute"/>
            or <see cref="T:MathCore.Tests.Annotations.UsedImplicitlyAttribute"/>
            </summary>
        </member>
        <member name="F:MathCore.Tests.Annotations.ImplicitUseTargetFlags.Members">
            <summary>Members of entity marked with attribute are considered used</summary>
        </member>
        <member name="F:MathCore.Tests.Annotations.ImplicitUseTargetFlags.WithMembers">
            <summary>Entity marked with attribute and all its members considered used</summary>
        </member>
        <member name="T:MathCore.Tests.Annotations.PublicAPIAttribute">
            <summary>
            This attribute is intended to mark publicly available API
            which should not be removed and so is treated as used
            </summary>
        </member>
        <member name="T:MathCore.Tests.Annotations.InstantHandleAttribute">
            <summary>
            Tells code analysis engine if the parameter is completely handled
            when the invoked method is on stack. If the parameter is a delegate,
            indicates that delegate is executed while the method is executed.
            If the parameter is an enumerable, indicates that it is enumerated
            while the method is executed
            </summary>
        </member>
        <member name="T:MathCore.Tests.Annotations.PathReferenceAttribute">
            <summary>
            Indicates that a parameter is a path to a file or a folder
            within a web project. Path can be relative or absolute,
            starting from web root (~)
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertDoubleEqualsChecker">
            <summary>Объект проверки равенства/неравенства чисел с плавающей запятой двойной точности</summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertDoubleEqualsChecker.EqualityCheckerWithAccuracy">
            <summary>Объект проверки равенства чисел с заданной точностью</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.AssertDoubleEqualsChecker.EqualityCheckerWithAccuracy._ActualValue">
            <summary>Проверяемое значение</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.AssertDoubleEqualsChecker.EqualityCheckerWithAccuracy._ExpectedValue">
            <summary>Значение, с которым требуется провести сравнение</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.AssertDoubleEqualsChecker.EqualityCheckerWithAccuracy._Not">
            <summary>Проверка на неравенство</summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.AssertDoubleEqualsChecker.EqualityCheckerWithAccuracy.#ctor(System.Double,System.Double,System.Boolean)">
            <summary>Инициализация нового объекта сравнения чисел с заданной точностью</summary>
            <param name="ActualValue">Проверяемое значение</param>
            <param name="ExpectedValue">Требуемое значение</param>
            <param name="Not">Проверять на неравенство</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.AssertDoubleEqualsChecker.EqualityCheckerWithAccuracy.WithAccuracy(System.Double,System.String)">
            <summary>Проверка с задаваемой точностью</summary>
            <param name="Accuracy">Точность сравнения</param>
            <param name="Message">Сообщение, выводимое в случае ошибки сравнения</param>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertDoubleEqualsChecker.CompareCheckerWithAccuracy">
            <summary>Объект сравнения чисел с заданной точностью</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.AssertDoubleEqualsChecker.CompareCheckerWithAccuracy._ActualValue">
            <summary>Проверяемое значение</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.AssertDoubleEqualsChecker.CompareCheckerWithAccuracy._ExpectedValue">
            <summary>Ожидаемое значение</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.AssertDoubleEqualsChecker.CompareCheckerWithAccuracy._IsEquals">
            <summary>Проверка на равенство</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.AssertDoubleEqualsChecker.CompareCheckerWithAccuracy._IsLessChecking">
            <summary>Проверка - меньше</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.AssertDoubleEqualsChecker.CompareCheckerWithAccuracy._IsChecked">
            <summary>Проверка выполнена</summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.AssertDoubleEqualsChecker.CompareCheckerWithAccuracy.#ctor(System.Double,System.Double,System.Boolean,System.Boolean)">
            <summary>Инициализация объекта сравнения</summary>
            <param name="ActualValue">Проверяемое значение</param>
            <param name="ExpectedValue">Ожидаемое значение</param>
            <param name="IsEquals">Проверять на равенство</param>
            <param name="IsLessChecking">Проверка - на "меньше"</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.AssertDoubleEqualsChecker.CompareCheckerWithAccuracy.WithAccuracy(System.Double,System.String)">
            <summary>Сравнение с задаваемой точностью</summary>
            <param name="Accuracy">Точность сравнения</param>
            <param name="Message">Сообщение, выводимое в случае неудачи</param>
        </member>
        <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.AssertDoubleEqualsChecker._ActualValue">
            <summary>Сравниваемое значение</summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.AssertDoubleEqualsChecker.#ctor(System.Double)">
            <summary>Инициализация нового объекта сравнения чисел с плавающей запятой</summary>
            <param name="ExpectedValue">Проверяемое значение</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.AssertDoubleEqualsChecker.IsEqualTo(System.Double)">
            <summary>Проверка значения на равенство</summary>
            <param name="ExpectedValue">Ожидаемое значение</param>
            <returns>Объект сравнения с задаваемой точностью</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.AssertDoubleEqualsChecker.IsNotEqualTo(System.Double)">
            <summary>Проверка значения на неравенство</summary>
            <param name="ExpectedValue">Ожидаемое значение</param>
            <returns>Объект сравнения с задаваемой точностью</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.AssertDoubleEqualsChecker.IsEqual(System.Double,System.String)">
            <summary>Сравнение с ожидаемым значением</summary>
            <param name="ExpectedValue">Ожидаемое значение</param>
            <param name="Message">Сообщение, выводимое в случае ошибки сравнения</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.AssertDoubleEqualsChecker.IsEqual(System.Double,System.Double,System.String)">
            <summary>Сравнение с ожидаемым значением с задаваемой точностью</summary>
            <param name="ExpectedValue">Ожидаемое значение</param>
            <param name="Accuracy">Точность</param>
            <param name="Message">Сообщение, выводимое в случае ошибки сравнения</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.AssertDoubleEqualsChecker.IsNotEqual(System.Double,System.String)">
            <summary>Проверка на неравенство</summary>
            <param name="ExpectedValue">Не ожидаемое значение</param>
            <param name="Message">Сообщение, выводимое в случае ошибки сравнения</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.AssertDoubleEqualsChecker.IsNotEqual(System.Double,System.Double,System.String)">
            <summary>Проверка на неравенство</summary>
            <param name="ExpectedValue">Не ожидаемое значение</param>
            <param name="Accuracy">Точность сравнения</param>
            <param name="Message">Сообщение, выводимое в случае ошибки сравнения</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.AssertDoubleEqualsChecker.GreaterThan(System.Double,System.String)">
            <summary>Проверка, что значение больше заданного</summary>
            <param name="ExpectedValue">Опорное значение</param>
            <param name="Message">Сообщение, выводимое в случае ошибки сравнения</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.AssertDoubleEqualsChecker.GreaterOrEqualsThan(System.Double,System.String)">
            <summary>Проверка, что значение больше, либо равно заданному</summary>
            <param name="ExpectedValue">Опорное значение</param>
            <param name="Message">Сообщение, выводимое в случае ошибки сравнения</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.AssertDoubleEqualsChecker.GreaterOrEqualsThan(System.Double,System.Double,System.String)">
            <summary>Проверка, что значение больше, либо равно заданному с заданной точностью</summary>
            <param name="ExpectedValue">Опорное значение</param>
            <param name="Accuracy">Точность сравнения</param>
            <param name="Message">Сообщение, выводимое в случае ошибки сравнения</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.AssertDoubleEqualsChecker.LessThan(System.Double,System.String)">
            <summary>Проверка, что значение меньше заданного</summary>
            <param name="ExpectedValue">Опорное значение</param>
            <param name="Message">Сообщение, выводимое в случае ошибки сравнения</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.AssertDoubleEqualsChecker.LessOrEqualsThan(System.Double,System.String)">
            <summary>Проверка, что значение меньше, либо равно заданному</summary>
            <param name="ExpectedValue">Опорное значение</param>
            <param name="Message">Сообщение, выводимое в случае ошибки сравнения</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.AssertDoubleEqualsChecker.LessOrEqualsThan(System.Double,System.Double,System.String)">
            <summary>Проверка, что значение меньше, либо равно заданному</summary>
            <param name="ExpectedValue">Опорное значение</param>
            <param name="Accuracy">Точность сравнения</param>
            <param name="Message">Сообщение, выводимое в случае ошибки сравнения</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.AssertDoubleEqualsChecker.Greater(System.Double)">
            <summary>Значение больше (строго), чем указанное с задаваемой точностью</summary>
            <param name="ExpectedValue">Ожидаемое значение</param>
            <returns>Объект сравнения с задаваемой точностью</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.AssertDoubleEqualsChecker.GreaterOrEqual(System.Double)">
            <summary>Значение больше, чем указанное с задаваемой точностью</summary>
            <param name="ExpectedValue">Ожидаемое значение</param>
            <returns>Объект сравнения с задаваемой точностью</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.AssertDoubleEqualsChecker.Less(System.Double)">
            <summary>Значение меньше (строго), чем указанное с задаваемой точностью</summary>
            <param name="ExpectedValue">Ожидаемое значение</param>
            <returns>Объект сравнения с задаваемой точностью</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.AssertDoubleEqualsChecker.LessOrEqual(System.Double)">
            <summary>Значение меньше, чем указанное с задаваемой точностью</summary>
            <param name="ExpectedValue">Ожидаемое значение</param>
            <returns>Объект сравнения с задаваемой точностью</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.AssertDoubleEqualsChecker.IsNotNaN(System.String)">
            <summary>Проверить, что значение не является не-числом</summary>
            <param name="Message">Сообщение, выводимое в случае если проверка провалена</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.AssertDoubleEqualsChecker.IsNaN(System.String)">
            <summary>Проверить, что значение является не-числом</summary>
            <param name="Message">Сообщение, выводимое в случае если проверка провалена</param>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertEqualsChecker`1">
            <summary>Объект проверки значения</summary>
            <typeparam name="T">Тип проверяемого значения</typeparam>
        </member>
        <member name="P:Microsoft.VisualStudio.TestTools.UnitTesting.AssertEqualsChecker`1.ActualValue">
            <summary>Проверяемое значение</summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.AssertEqualsChecker`1.#ctor(`0)">
            <summary>Инициализация нового объекта проверки значения</summary>
            <param name="ActualValue">Проверяемое значение</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.AssertEqualsChecker`1.IsEqual(`0,System.String)">
            <summary>Проверка значения на эквивалентность ожидаемому</summary>
            <param name="ExpectedValue">Ожидаемое значение</param>
            <param name="Message">Сообщение, выводимое в случае неудачи</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.AssertEqualsChecker`1.IsEqual(`0,System.Collections.Generic.IEqualityComparer{`0},System.String)">
            <summary>Проверка значение на эквивалентность ожидаемому</summary>
            <param name="ExpectedValue">Ожидаемое значение</param>
            <param name="Comparer">Объект сравнения</param>
            <param name="Message">Сообщение, выводимое в случае неудачи</param>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertEqualsChecker`1.EqualityComparer">
            <summary>Метод сравнения значений</summary>
            <param name="ActualValue">Проверяемое значение</param>
            <param name="ExpectedValue">Ожидаемое значение</param>
            <returns>Истина, если проверяемое и ожидаемое значения равны</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.AssertEqualsChecker`1.IsEqual(`0,Microsoft.VisualStudio.TestTools.UnitTesting.AssertEqualsChecker{`0}.EqualityComparer,System.String)">
            <summary>Проверка значение на эквивалентность ожидаемому</summary>
            <param name="ExpectedValue">Ожидаемое значение</param>
            <param name="Comparer">Метод сравнения</param>
            <param name="Message">Сообщение, выводимое в случае неудачи</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.AssertEqualsChecker`1.IsReferenceEquals(`0,System.String)">
            <summary>Проверка значения на идентичность ожидаемому (при сравнении ссылок)</summary>
            <param name="ExpectedValue">Ожидаемое значение</param>
            <param name="Message">Сообщение, выводимое в случае неудачи</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.AssertEqualsChecker`1.IsNotEqual(`0,System.String)">
            <summary>Проверка значения на не эквивалентность ожидаемому</summary>
            <param name="ExpectedValue">Не ожидаемое значение</param>
            <param name="Message">Сообщение, выводимое в случае неудачи</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.AssertEqualsChecker`1.IsNotReferenceEquals(`0,System.String)">
            <summary>Проверка значения на не идентичность ожидаемому (при сравнении ссылок)</summary>
            <param name="ExpectedValue">Ожидаемое значение</param>
            <param name="Message">Сообщение, выводимое в случае неудачи</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.AssertEqualsChecker`1.IsNull(System.String)">
            <summary>Ссылка на значение должна быть пустой</summary>
            <param name="Message">Сообщение, выводимое в случае неудачи</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.AssertEqualsChecker`1.IsNotNull(System.String)">
            <summary>Значение, гарантированно не являющееся пустой ссылкой</summary>
            <param name="Message">Сообщение, выводимое в случае неудачи</param>
            <returns>Значение, гарантированно не являющееся пустой ссылкой</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.AssertEqualsChecker`1.Is(System.Type,System.String)">
            <summary>Значение является значением указанного типа</summary>
            <param name="ExpectedType">Ожидаемый тип значения</param>
            <param name="Message">Сообщение, выводимое в случае ошибки</param>
            <returns>Текущий объект проверки</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.AssertEqualsChecker`1.Is``1(System.String)">
            <summary>Значение является значением указанного типа</summary>
            <typeparam name="TExpectedType">Ожидаемый тип значения</typeparam>
            <param name="Message">Сообщение, выводимое в случае ошибки</param>
            <returns>Текущий объект проверки</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.AssertEqualsChecker`1.As``1(System.String)">
            <summary>Объект является объектом более специфичного типа</summary>
            <typeparam name="TExpectedType">Тип наследника</typeparam>
            <param name="Message">Сообщение, выводимое в случае ошибки</param>
            <returns>Объект проверки типа наследника</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.AssertEqualsChecker`1.As``2(System.Func{``0,``1},System.String)">
            <summary>Объект является объектом более специфичного типа и можно определить производное значение указанным методом</summary>
            <typeparam name="TExpectedType">Тип наследника</typeparam>
            <typeparam name="TValue">Тип значения</typeparam>
            <param name="Selector">Метод определения значения</param>
            <param name="Message">Сообщение, выводимое в случае ошибки</param>
            <returns>Объект проверки производного значения</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.AssertEqualsChecker`1.Where``1(System.Func{`0,``0})">
            <summary>Проверка вложенного значения</summary>
            <typeparam name="TValue">Тип вложенного значения</typeparam>
            <param name="Selector">Метод определения вложенного значения</param>
            <returns>Объект проверки вложенного значения</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.AssertEqualsChecker`1.Where``1(System.Func{`0,``0},System.Action{Microsoft.VisualStudio.TestTools.UnitTesting.AssertEqualsChecker{``0}})">
            <summary>Проверка вложенного значения</summary>
            <typeparam name="TValue">Тип вложенного значения</typeparam>
            <param name="Selector">Метод определения вложенного значения</param>
            <param name="Checker">Метод проверки вложенного значения</param>
            <returns>Объект проверки текущего значения</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.AssertEqualsChecker`1.op_Implicit(Microsoft.VisualStudio.TestTools.UnitTesting.AssertEqualsChecker{`0})~`0">
            <summary>Оператор неявного приведения типа объекта проверки к объекту проверяемого значения, разворачивающий значение</summary>
            <param name="Checker">Объект проверки</param>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertExtensions">
            <summary>Класс методов-расширений для объекта-помощника проверки <see cref="P:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.That"/></summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.AssertExtensions.Value``1(Microsoft.VisualStudio.TestTools.UnitTesting.Assert,``0)">
            <summary>Проверка значения</summary>
            <typeparam name="T">ТИп проверяемого значения</typeparam>
            <param name="that">Объект-помощник проверки</param>
            <param name="ActualValue">Проверяемое значение</param>
            <returns>Объект проверки</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.AssertExtensions.Value(Microsoft.VisualStudio.TestTools.UnitTesting.Assert,System.Double)">
            <summary>Проверка вещественного значения</summary>
            <param name="that">Объект-помощник проверки</param>
            <param name="ActualValue">Проверяемое значение</param>
            <returns>Объект проверки вещественных значений</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.AssertExtensions.Value(Microsoft.VisualStudio.TestTools.UnitTesting.Assert,System.Int32)">
            <summary>Проверка целочисленного значения</summary>
            <param name="that">Объект-помощник проверки</param>
            <param name="ActualValue">Проверяемое значение</param>
            <returns>Объект проверки целочисленных значений</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.AssertIntEqualsChecker">
            <summary>Объект проверки равенства/неравенства целых чисел</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.AssertIntEqualsChecker._ActualValue">
            <summary>Проверяемое значение</summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.AssertIntEqualsChecker.#ctor(System.Int32)">
            <summary>Инициализация нового объекта проверки целого числа</summary>
            <param name="ExpectedValue">Проверяемое целое число</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.AssertIntEqualsChecker.IsEqual(System.Int32,System.String)">
            <summary>Проверка, что проверяемое значение равно ожидаемому</summary>
            <param name="ExpectedValue">Ожидаемое значение</param>
            <param name="Message">Сообщение, выводимое в случае неудачи</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.AssertIntEqualsChecker.IsEqual(System.Int32,System.Double,System.String)">
            <summary>Проверка, что проверяемое значение равно ожидаемому с заданной точностью</summary>
            <param name="ExpectedValue">Ожидаемое значение</param>
            <param name="Accuracy">Точность сравнения</param>
            <param name="Message">Сообщение, выводимое в случае неудачи</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.AssertIntEqualsChecker.IsNotEqual(System.Int32,System.String)">
            <summary>Проверка, что проверяемое значение не равно ожидаемому</summary>
            <param name="ExpectedValue">Ожидаемое значение</param>
            <param name="Message">Сообщение, выводимое в случае неудачи</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.AssertIntEqualsChecker.IsNotEqual(System.Int32,System.Double,System.String)">
            <summary>Проверка, что проверяемое значение не равно ожидаемому с заданной точностью</summary>
            <param name="ExpectedValue">Ожидаемое значение</param>
            <param name="Accuracy">Точность сравнения</param>
            <param name="Message">Сообщение, выводимое в случае неудачи</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.AssertIntEqualsChecker.GreaterThan(System.Int32,System.String)">
            <summary>Проверка, что значение больше заданного</summary>
            <param name="ExpectedValue">Опорное значение</param>
            <param name="Message">Сообщение, выводимое в случае ошибки сравнения</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.AssertIntEqualsChecker.GreaterOrEqualsThan(System.Int32,System.String)">
            <summary>Проверка, что значение больше, либо равно заданному</summary>
            <param name="ExpectedValue">Опорное значение</param>
            <param name="Message">Сообщение, выводимое в случае ошибки сравнения</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.AssertIntEqualsChecker.GreaterOrEqualsThan(System.Int32,System.Int32,System.String)">
            <summary>Проверка, что значение больше, либо равно заданному с заданной точностью</summary>
            <param name="ExpectedValue">Опорное значение</param>
            <param name="Accuracy">Точность сравнения</param>
            <param name="Message">Сообщение, выводимое в случае ошибки сравнения</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.AssertIntEqualsChecker.LessThan(System.Int32,System.String)">
            <summary>Проверка, что значение меньше заданного</summary>
            <param name="ExpectedValue">Опорное значение</param>
            <param name="Message">Сообщение, выводимое в случае ошибки сравнения</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.AssertIntEqualsChecker.LessOrEqualsThan(System.Int32,System.String)">
            <summary>Проверка, что значение меньше, либо равно заданному</summary>
            <param name="ExpectedValue">Опорное значение</param>
            <param name="Message">Сообщение, выводимое в случае ошибки сравнения</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.AssertIntEqualsChecker.LessOrEqualsThan(System.Int32,System.Int32,System.String)">
            <summary>Проверка, что значение меньше, либо равно заданному</summary>
            <param name="ExpectedValue">Опорное значение</param>
            <param name="Accuracy">Точность сравнения</param>
            <param name="Message">Сообщение, выводимое в случае ошибки сравнения</param>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssertChecker`1">
            <summary>Объект проверки коллекции</summary>
            <typeparam name="T">Тип элементов коллекции</typeparam>
        </member>
        <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssertChecker`1._ActualCollection">
            <summary>Проверяемая коллекция</summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssertChecker`1.#ctor(System.Collections.Generic.ICollection{`0})">
            <summary>Инициализация нового объекта проверки коллекции</summary>
            <param name="ActualCollection">Проверяемая коллекция</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssertChecker`1.IsEqualTo(System.Collections.Generic.ICollection{`0},System.String)">
            <summary>По размеру и поэлементно эквивалентна ожидаемой коллекции</summary>
            <param name="ExpectedCollection">Ожидаемая коллекция значений</param>
            <param name="Message">Сообщение, выводимое в случае неудачи</param>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssertChecker`1.EqualityComparer">
            <summary>Метод сравнения значений элементов коллекции</summary>
            <param name="ExpectedValue">Ожидаемое значение</param>
            <param name="ActualValue">Проверяемое значение</param>
            <returns>Истина, если проверяемое значение соответствует ожидаемому</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssertChecker`1.IsEqualTo(System.Collections.Generic.ICollection{`0},Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssertChecker{`0}.EqualityComparer,System.String)">
            <summary>По размеру и поэлементно эквивалентна ожидаемой коллекции</summary>
            <param name="ExpectedCollection">Ожидаемая коллекция значений</param>
            <param name="Comparer">Метод проверки элементов коллекции</param>
            <param name="Message">Сообщение, выводимое в случае неудачи</param>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssertChecker`1.EqualityPositionalComparer">
            <summary>Метод сравнения значений элементов коллекции</summary>
            <param name="ExpectedValue">Ожидаемое значение</param>
            <param name="ActualValue">Проверяемое значение</param>
            <param name="Index">Индекс проверяемого элемента</param>
            <returns>Истина, если проверяемое значение соответствует ожидаемому</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssertChecker`1.IsEqualTo(System.Collections.Generic.ICollection{`0},Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssertChecker{`0}.EqualityPositionalComparer,System.String)">
            <summary>По размеру и поэлементно эквивалентна ожидаемой коллекции</summary>
            <param name="ExpectedCollection">Ожидаемая коллекция значений</param>
            <param name="Comparer">Метод проверки элементов коллекции</param>
            <param name="Message">Сообщение, выводимое в случае неудачи</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssertChecker`1.IsEqualTo(System.Collections.Generic.ICollection{`0},System.Collections.Generic.IEqualityComparer{`0},System.String)">
            <summary>По размеру и поэлементно эквивалентна ожидаемой коллекции</summary>
            <param name="ExpectedCollection">Ожидаемая коллекция значений</param>
            <param name="Comparer">Объект проверки элементов коллекции</param>
            <param name="Message">Сообщение, выводимое в случае неудачи</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssertChecker`1.Max(System.Func{`0,System.Double})">
            <summary>Максимальное значение в коллекции</summary>
            <param name="Selector">Метод оценки элемента коллекции</param>
            <returns>Объект проверки вещественного значения</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssertChecker`1.Min(System.Func{`0,System.Double})">
            <summary>Минимальное значение в коллекции</summary>
            <param name="Selector">Метод оценки элемента коллекции</param>
            <returns>Объект проверки вещественного значения</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssertChecker`1.Average(System.Func{`0,System.Double})">
            <summary>Среднее значение в коллекции</summary>
            <param name="Selector">Метод оценки элемента коллекции</param>
            <returns>Объект проверки вещественного значения</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssertChecker`1.Contains(`0,System.String)">
            <summary>Проверка, что коллекция содержит указанный элемент</summary>
            <param name="item">Элемент, который должен быть найден в коллекции</param>
            <param name="Message">Сообщение, выводимое в случае неудачи</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssertChecker`1.NotContains(`0,System.String)">
            <summary>Проверка, что указанного элемента нет в коллекции</summary>
            <param name="item">Элемент, которого не должно быть в коллекции</param>
            <param name="Message">Сообщение, выводимое в случае неудачи</param>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssertChecker">
            <summary>Объект проверки коллекции</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssertChecker._ActualCollection">
            <summary>Проверяемая коллекция</summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssertChecker.#ctor(System.Collections.ICollection)">
            <summary>Инициализация нового объекта проверки коллекции</summary>
            <param name="ActualCollection">Проверяемая коллекция</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssertChecker.IsEqualTo(System.Collections.ICollection,System.String)">
            <summary>По размеру и поэлементно эквивалентна ожидаемой коллекции</summary>
            <param name="ExpectedCollection">Ожидаемая коллекция значений</param>
            <param name="Message">Сообщение, выводимое в случае неудачи</param>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssertChecker.EqualityComparer">
            <summary>Метод сравнения значений элементов коллекции</summary>
            <param name="ExpectedValue">Ожидаемое значение</param>
            <param name="ActualValue">Проверяемое значение</param>
            <returns>Истина, если проверяемое значение соответствует ожидаемому</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssertChecker.IsEqualTo(System.Collections.ICollection,Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssertChecker.EqualityComparer,System.String)">
            <summary>По размеру и поэлементно эквивалентна ожидаемой коллекции</summary>
            <param name="ExpectedCollection">Ожидаемая коллекция значений</param>
            <param name="Comparer">Метод сравнения</param>
            <param name="Message">Сообщение, выводимое в случае неудачи</param>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssertChecker.EqualityPositionalComparer">
            <summary>Метод сравнения значений элементов коллекции</summary>
            <param name="ExpectedValue">Ожидаемое значение</param>
            <param name="ActualValue">Проверяемое значение</param>
            <param name="Index">Индекс проверяемого элемента</param>
            <returns>Истина, если проверяемое значение соответствует ожидаемому</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssertChecker.IsEqualTo(System.Collections.ICollection,Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssertChecker.EqualityPositionalComparer,System.String)">
            <summary>По размеру и поэлементно эквивалентна ожидаемой коллекции</summary>
            <param name="ExpectedCollection">Ожидаемая коллекция значений</param>
            <param name="Comparer">Метод сравнения</param>
            <param name="Message">Сообщение, выводимое в случае неудачи</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssertChecker.IsEqualTo(System.Collections.ICollection,System.Collections.IEqualityComparer,System.String)">
            <summary>По размеру и поэлементно эквивалентна ожидаемой коллекции</summary>
            <param name="ExpectedCollection">Ожидаемая коллекция значений</param>
            <param name="Comparer">Объект сравнения</param>
            <param name="Message">Сообщение, выводимое в случае неудачи</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssertChecker.Max(System.Func{System.Object,System.Double})">
            <summary>Минимальное значение в коллекции</summary>
            <param name="Selector">Метод оценки элемента коллекции</param>
            <returns>Объект проверки вещественного значения</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssertChecker.Min(System.Func{System.Object,System.Double})">
            <summary>Минимальное значение в коллекции</summary>
            <param name="Selector">Метод оценки элемента коллекции</param>
            <returns>Объект проверки вещественного значения</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssertChecker.Average(System.Func{System.Object,System.Double})">
            <summary>Среднее значение в коллекции</summary>
            <param name="Selector">Метод оценки элемента коллекции</param>
            <returns>Объект проверки вещественного значения</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssertExtensions">
            <summary>Методы-расширения для объекта-помощника проверки <see cref="P:Microsoft.VisualStudio.TestTools.UnitTesting.Assert.That"/></summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssertExtensions.Collection(Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert,System.Collections.Generic.ICollection{System.Double})">
            <param name="assert">Объект-помощник проверки</param>
            <param name="ActualCollection">Проверяемая коллекция</param>
            <returns>Объект проверки</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssertExtensions.Collection(Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert,System.Double[0:,0:])">
            <summary>Проверка двумерного массива вещественных чисел</summary>
            <param name="assert">Объект-помощник проверки</param>
            <param name="ActualArray">Проверяемый двумерный массив</param>
            <returns>Объект проверки</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssertExtensions.Collection``1(Microsoft.VisualStudio.TestTools.UnitTesting.CollectionAssert,System.Collections.Generic.ICollection{``0})">
            <summary>Проверка коллекции</summary>
            <typeparam name="T">Тип элементов коллекции</typeparam>
            <param name="assert">Объект-помощник проверки</param>
            <param name="ActualCollection">Проверяемая коллекция</param>
            <returns>Объект проверки</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.DoubleCollectionAssertChecker">
            <summary>Объект проверки коллекций вещественных чисел</summary>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.DoubleCollectionAssertChecker.EqualityCheckerWithAccuracy">
            <summary>Объект проверки равенства элементов вещественной коллекции чисел с заданной точностью</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.DoubleCollectionAssertChecker.EqualityCheckerWithAccuracy._ActualValues">
            <summary>Проверяемая коллекция значение</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.DoubleCollectionAssertChecker.EqualityCheckerWithAccuracy._ExpectedValues">
            <summary>Значения, с которыми требуется провести сравнение</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.DoubleCollectionAssertChecker.EqualityCheckerWithAccuracy._Not">
            <summary>Проверка на неравенство</summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.DoubleCollectionAssertChecker.EqualityCheckerWithAccuracy.#ctor(System.Collections.Generic.ICollection{System.Double},System.Double[],System.Boolean)">
            <summary>Инициализация нового объекта сравнения чисел с заданной точностью</summary>
            <param name="ActualValues">Проверяемая коллекция</param>
            <param name="ExpectedValues">Требуемые значения</param>
            <param name="Not">Проверять на неравенство</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.DoubleCollectionAssertChecker.EqualityCheckerWithAccuracy.WithAccuracy(System.Double,System.String)">
            <summary>Проверка с задаваемой точностью</summary>
            <param name="Accuracy">Точность сравнения</param>
            <param name="Message">Сообщение, выводимое в случае ошибки сравнения</param>
        </member>
        <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.DoubleCollectionAssertChecker._ActualCollection">
            <summary>Проверяемая коллекция</summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.DoubleCollectionAssertChecker.#ctor(System.Collections.Generic.ICollection{System.Double})">
            <summary>Инициализация нового объекта проверки коллекции вещественных чисел</summary>
            <param name="ActualCollection"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.DoubleCollectionAssertChecker.ValuesAreEqualTo(System.Double[])">
            <summary>Проверка значений коллекции на равенство</summary>
            <param name="ExpectedValues">Ожидаемые значения</param>
            <returns>Объект сравнения с задаваемой точностью</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.DoubleCollectionAssertChecker.ValuesAreNotEqualTo(System.Double[])">
            <summary>Проверка значений коллекции на равенство</summary>
            <param name="ExpectedValues">Ожидаемые значения</param>
            <returns>Объект сравнения с задаваемой точностью</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.DoubleCollectionAssertChecker.ValuesAreEqual(System.Double[])">
            <summary>Проверка на эквивалентность с задаваемым набором значений</summary>
            <param name="ExpectedValues">Ожидаемые значения коллекции</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.DoubleCollectionAssertChecker.ValuesAreEqual(System.String,System.Double[])">
            <summary>Проверка на эквивалентность с задаваемым набором значений</summary>
            <param name="Message">Сообщение, выводимое в случае неудачи</param>
            <param name="ExpectedValues">Ожидаемые значения коллекции</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.DoubleCollectionAssertChecker.IsEqualTo(System.Collections.Generic.ICollection{System.Double},System.String)">
            <summary>По размеру и поэлементно эквивалентна ожидаемой коллекции</summary>
            <param name="ExpectedCollection">Ожидаемая коллекция значений</param>
            <param name="Message">Сообщение, выводимое в случае неудачи</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.DoubleCollectionAssertChecker.IsEqualTo(System.Collections.Generic.ICollection{System.Double},System.Double,System.String)">
            <summary>По размеру и поэлементно эквивалентна ожидаемой коллекции</summary>
            <param name="ExpectedCollection">Ожидаемая коллекция значений</param>
            <param name="Accuracy">Точность сравнения</param>
            <param name="Message">Сообщение, выводимое в случае неудачи</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.DoubleCollectionAssertChecker.ElementsAreEqualTo(System.Double,System.String)">
            <summary>Все элементы коллекции равны заданному значению</summary>
            <param name="ExpectedValue">Ожидаемое значение</param>
            <param name="Message">Сообщение, выводимое в случае неудачи</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.DoubleCollectionAssertChecker.ElementsAreEqualTo(System.Double,System.Double,System.String)">
            <summary>Все элементы коллекции равны заданному значению</summary>
            <param name="ExpectedValue">Ожидаемое значение</param>
            <param name="Accuracy"></param>
            <param name="Message">Сообщение, выводимое в случае неудачи</param>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.DoubleCollectionAssertChecker.ElementChecker">
            <summary>Критерий проверки элементов коллекции</summary>
            <param name="ActualValue">Проверяемое значение</param>
            <returns>Истина, если элемент соответствует критерию проверки</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.DoubleCollectionAssertChecker.ElementsAreSatisfyCondition(Microsoft.VisualStudio.TestTools.UnitTesting.DoubleCollectionAssertChecker.ElementChecker,System.String)">
            <summary>Все элементы коллекции удовлетворяют условию</summary>
            <param name="Condition">Условие проверки всех элементов</param>
            <param name="Message">Сообщение, выводимое в случае неудачи</param>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.DoubleCollectionAssertChecker.PositionElementChecker">
            <summary>Позиционный критерий проверки элементов коллекции</summary>
            <param name="ActualValue">Проверяемое значение</param>
            <param name="ItemIndex">Индекс проверяемого элемента в коллекции</param>
            <returns>Истина, если элемент соответствует критерию проверки</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.DoubleCollectionAssertChecker.ElementsAreSatisfyCondition(Microsoft.VisualStudio.TestTools.UnitTesting.DoubleCollectionAssertChecker.PositionElementChecker,System.String)">
            <summary>Все элементы коллекции удовлетворяют условию</summary>
            <param name="Condition">Условие проверки всех элементов</param>
            <param name="Message">Сообщение, выводимое в случае неудачи</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.DoubleCollectionAssertChecker.Max">
            <summary>Максимальное значение в коллекции</summary>
            <returns>Объект проверки вещественного значения</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.DoubleCollectionAssertChecker.Min">
            <summary>Минимальное значение в коллекции</summary>
            <returns>Объект проверки вещественного значения</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.DoubleCollectionAssertChecker.Average">
            <summary>Среднее значение в коллекции</summary>
            <returns>Объект проверки вещественного значения</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.DoubleDimensionArrayAssertChecker">
            <summary>Объект проверки двумерного массива вещественных чисел</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.DoubleDimensionArrayAssertChecker._ActualArray">
            <summary>Проверяемый массив</summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.DoubleDimensionArrayAssertChecker.#ctor(System.Double[0:,0:])">
            <summary>Инициализация нового объекта проверки</summary>
            <param name="ActualArray">Проверяемый массив</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.DoubleDimensionArrayAssertChecker.IsEqualTo(System.Double[0:,0:],System.String)">
            <summary>По размеру и поэлементно массив эквивалентен ожидаемому массиву</summary>
            <param name="ExpectedArray">Ожидаемая коллекция значений</param>
            <param name="Message">Сообщение, выводимое в случае неудачи</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.DoubleDimensionArrayAssertChecker.IsEqualTo(System.Double[0:,0:],System.Double,System.String)">
            <summary>По размеру и поэлементно эквивалентна ожидаемой коллекции</summary>
            <param name="ExpectedArray">Ожидаемая коллекция значений</param>
            <param name="Accuracy">Точность сравнения</param>
            <param name="Message">Сообщение, выводимое в случае неудачи</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.DoubleDimensionArrayAssertChecker.ElementsAreEqualTo(System.Double,System.String)">
            <summary>Все элементы массива равны ожидаемому значению</summary>
            <param name="ExpectedValue">Ожидаемое значение</param>
            <param name="Message">Сообщение, выводимое в случае неудачи</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.DoubleDimensionArrayAssertChecker.ElementsAreEqualTo(System.Double,System.Double,System.String)">
            <summary>Все элементы массива равны ожидаемому значению</summary>
            <param name="ExpectedValue">Ожидаемое значение</param>
            <param name="Accuracy">Точность сравнения</param>
            <param name="Message">Сообщение, выводимое в случае неудачи</param>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.DoubleDimensionArrayAssertChecker.ElementChecker">
            <summary>Критерий проверки элементов коллекции</summary>
            <param name="ActualValue">Проверяемое значение</param>
            <returns>Истина, если элемент соответствует критерию проверки</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.DoubleDimensionArrayAssertChecker.ElementsAreSatisfyCondition(Microsoft.VisualStudio.TestTools.UnitTesting.DoubleDimensionArrayAssertChecker.ElementChecker,System.String)">
            <summary>Все элементы коллекции удовлетворяют условию</summary>
            <param name="Condition">Условие проверки всех элементов</param>
            <param name="Message">Сообщение, выводимое в случае неудачи</param>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.DoubleDimensionArrayAssertChecker.PositionElementChecker">
            <summary>Позиционный критерий проверки элементов коллекции</summary>
            <param name="ActualValue">Проверяемое значение</param>
            <param name="i">Индекс строки</param>
            <param name="j">Индекс столбца</param>
            <returns>Истина, если элемент соответствует критерию проверки</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.DoubleDimensionArrayAssertChecker.ElementsAreSatisfyCondition(Microsoft.VisualStudio.TestTools.UnitTesting.DoubleDimensionArrayAssertChecker.PositionElementChecker,System.String)">
            <summary>Все элементы коллекции удовлетворяют условию</summary>
            <param name="Condition">Условие проверки всех элементов</param>
            <param name="Message">Сообщение, выводимое в случае неудачи</param>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.Service">
            <summary>Сервисные методы</summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Service.AddSeparator(System.String,System.String)">
            <summary>Добавить разделитель к сообщению в конце в случае наличия сообщения</summary>
            <param name="Str">Строка сообщения</param>
            <param name="Separator">Разделитель</param>
            <returns>Доработанная строка сообщения</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.Service.CheckSeparator(System.String@,System.String)">
            <summary>Проверить строку сообщения на предмет наличия в ней разделителя в конце и добавить разделитель в случае его отсутствия</summary>
            <param name="Str">Проверяемая строка сообщения</param>
            <param name="Separator">Разделитель сообщения</param>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.UnitTest">
            <summary>Базовый класс модульного теста</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.TestTools.UnitTesting.UnitTest._RndGenerator">
            <summary>Генератор случайных чисел</summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.UnitTest.GetRNDInt(System.Int32,System.Int32)">
            <summary>Целое случайное число из указанного диапазона с равномерным распределением</summary>
            <param name="Min">Минимальная граница диапазона (входит)</param>
            <param name="Max">Максимальная граница диапазона (не входит)</param>
            <returns>Случайное целое число</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.UnitTest.GetRNDDouble(System.Double,System.Double)">
            <summary>Случайное вещественное число с равномерным распределением в указанном диапазоне</summary>
            <param name="Min">Нижняя граница диапазона</param>
            <param name="Max">Верхняя граница диапазона</param>
            <returns>Случайное число с равномерным распределением в указанном диапазоне</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.UnitTest.GetRNDDoubleArray(System.Int32,System.Double,System.Double)">
            <summary>Получить массив случайных чисел с равномерным распределением</summary>
            <param name="Count">Размер массива</param>
            <param name="Min">Нижняя граница интервала</param>
            <param name="Max">Верхняя граница интервала</param>
            <returns>Массив случайных чисел в заданном интервале</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.UnitTest.GetRNDIntArray(System.Int32,System.Int32,System.Int32)">
            <summary>Получить массив случайных чисел с равномерным распределением</summary>
            <param name="Count">Размер массива</param>
            <param name="Min">Нижняя граница интервала (входит)</param>
            <param name="Max">Верхняя граница интервала (не входи)</param>
            <returns>Массив целых случайных чисел</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.TestTools.UnitTesting.UnitTest.ToleranceComparer">
            <summary>Объект сравнения вещественных чисел с указанной точностью</summary>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.UnitTest.ToleranceComparer.#ctor(System.Double)">
            <summary>Инициализация нового объекта сравнения вещественных чисел с указанной точностью</summary>
            <param name="Tolerance">Точность сравнения</param>
        </member>
        <member name="M:Microsoft.VisualStudio.TestTools.UnitTesting.UnitTest.GetComparer(System.Double)">
            <summary>Получить объект для сравнения вещественных чисел с заданной точностью</summary>
            <param name="Tolerance">Точность сравнения чисел</param>
            <returns>Объект сравнения чисел с заданной точностью</returns>
        </member>
    </members>
</doc>
